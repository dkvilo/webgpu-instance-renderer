{"version":3,"file":"index-uiEEE5Yf.js","sources":["../../src/math/mat4.ts","../../src/renderer/renderer.ts","../../src/renderer/default-program.ts","../../src/renderer/render-object.ts","../../src/renderer/object3d.ts","../../src/renderer/object2d.ts","../../src/utils/geometry.ts","../../src/app.ts","../../src/utils/utils.ts","../../src/main.ts"],"sourcesContent":["/**\n * Simple matrix library for WebGPU renderer\n * Primarily focused on 4x4 matrices for 3D transformations\n */\n\n/**\n * Matrix4 class for handling 4x4 matrix operations\n */\nexport class Mat4 {\n  /**\n   * The internal Float32Array storage for the matrix data\n   */\n  public data: Float32Array;\n\n  /**\n   * Creates a new 4x4 matrix\n   * @param values Optional initial values for the matrix\n   */\n  constructor(values?: number[] | Float32Array) {\n    this.data = new Float32Array(16);\n\n    if (values) {\n      for (let i = 0; i < Math.min(values.length, 16); i++) {\n        this.data[i] = values[i];\n      }\n    }\n  }\n\n  /**\n   * Creates a new matrix with the same values as this one\n   * @returns A new matrix with the same values\n   */\n  clone(): Mat4 {\n    return new Mat4(this.data);\n  }\n\n  /**\n   * Sets this matrix to the identity matrix\n   * @returns This matrix for chaining\n   */\n  identity(): Mat4 {\n    this.data.fill(0);\n    this.data[0] = 1;\n    this.data[5] = 1;\n    this.data[10] = 1;\n    this.data[15] = 1;\n    return this;\n  }\n\n  /**\n   * Creates a new identity matrix\n   * @returns A new identity matrix\n   */\n  static identity(): Mat4 {\n    const mat = new Mat4();\n    return mat.identity();\n  }\n\n  /**\n   * Multiplies this matrix by another matrix and stores the result in this matrix\n   * @param other The matrix to multiply by\n   * @returns This matrix for chaining\n   */\n  multiply(other: Mat4): Mat4 {\n    const a = this.data;\n    const b = other.data;\n    const res = new Float32Array(16);\n\n    const a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    const a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    const a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    const a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    const b00 = b[0], b01 = b[1], b02 = b[2], b03 = b[3];\n    const b10 = b[4], b11 = b[5], b12 = b[6], b13 = b[7];\n    const b20 = b[8], b21 = b[9], b22 = b[10], b23 = b[11];\n    const b30 = b[12], b31 = b[13], b32 = b[14], b33 = b[15];\n\n    res[0] = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;\n    res[1] = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;\n    res[2] = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;\n    res[3] = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;\n    res[4] = a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30;\n    res[5] = a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31;\n    res[6] = a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32;\n    res[7] = a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33;\n    res[8] = a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30;\n    res[9] = a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31;\n    res[10] = a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32;\n    res[11] = a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33;\n    res[12] = a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30;\n    res[13] = a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31;\n    res[14] = a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32;\n    res[15] = a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33;\n\n    this.data = res;\n    return this;\n  }\n\n  /**\n   * Multiplies two matrices and returns a new matrix with the result\n   * @param a The first matrix\n   * @param b The second matrix\n   * @returns A new matrix with the result\n   */\n  static multiply(a: Mat4, b: Mat4): Mat4 {\n    return a.clone().multiply(b);\n  }\n\n  /**\n   * Transposes this matrix\n   * @returns This matrix for chaining\n   */\n  transpose(): Mat4 {\n    const a = this.data;\n    const res = new Float32Array(16);\n\n    res[0] = a[0];\n    res[1] = a[4];\n    res[2] = a[8];\n    res[3] = a[12];\n    res[4] = a[1];\n    res[5] = a[5];\n    res[6] = a[9];\n    res[7] = a[13];\n    res[8] = a[2];\n    res[9] = a[6];\n    res[10] = a[10];\n    res[11] = a[14];\n    res[12] = a[3];\n    res[13] = a[7];\n    res[14] = a[11];\n    res[15] = a[15];\n\n    this.data = res;\n    return this;\n  }\n\n  /**\n   * Calculates the determinant of this matrix\n   * @returns The determinant\n   */\n  determinant(): number {\n    const a = this.data;\n    const a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    const a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    const a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    const a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    const b00 = a00 * a11 - a01 * a10;\n    const b01 = a00 * a12 - a02 * a10;\n    const b02 = a00 * a13 - a03 * a10;\n    const b03 = a01 * a12 - a02 * a11;\n    const b04 = a01 * a13 - a03 * a11;\n    const b05 = a02 * a13 - a03 * a12;\n    const b06 = a20 * a31 - a21 * a30;\n    const b07 = a20 * a32 - a22 * a30;\n    const b08 = a20 * a33 - a23 * a30;\n    const b09 = a21 * a32 - a22 * a31;\n    const b10 = a21 * a33 - a23 * a31;\n    const b11 = a22 * a33 - a23 * a32;\n\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n  }\n\n  /**\n   * Inverts this matrix\n   * @returns This matrix for chaining, or null if the matrix is not invertible\n   */\n  invert(): Mat4 | null {\n    const a = this.data;\n    const res = new Float32Array(16);\n\n    const a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    const a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    const a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    const a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    const b00 = a00 * a11 - a01 * a10;\n    const b01 = a00 * a12 - a02 * a10;\n    const b02 = a00 * a13 - a03 * a10;\n    const b03 = a01 * a12 - a02 * a11;\n    const b04 = a01 * a13 - a03 * a11;\n    const b05 = a02 * a13 - a03 * a12;\n    const b06 = a20 * a31 - a21 * a30;\n    const b07 = a20 * a32 - a22 * a30;\n    const b08 = a20 * a33 - a23 * a30;\n    const b09 = a21 * a32 - a22 * a31;\n    const b10 = a21 * a33 - a23 * a31;\n    const b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n      return null; // Not invertible\n    }\n    det = 1.0 / det;\n\n    res[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    res[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    res[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    res[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    res[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    res[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    res[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    res[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    res[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    res[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    res[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    res[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    res[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    res[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    res[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    res[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    this.data = res;\n    return this;\n  }\n\n  /**\n   * Creates a translation matrix\n   * @param x X translation\n   * @param y Y translation\n   * @param z Z translation\n   * @returns This matrix for chaining\n   */\n  translation(x: number, y: number, z: number): Mat4 {\n    this.identity();\n\n    this.data[12] = x;\n    this.data[13] = y;\n    this.data[14] = z;\n\n    return this;\n  }\n\n  /**\n   * Creates a new translation matrix\n   * @param x X translation\n   * @param y Y translation\n   * @param z Z translation\n   * @returns A new translation matrix\n   */\n  static translation(x: number, y: number, z: number): Mat4 {\n    return new Mat4().translation(x, y, z);\n  }\n\n  /**\n   * Creates a scaling matrix\n   * @param x X scale\n   * @param y Y scale\n   * @param z Z scale\n   * @returns This matrix for chaining\n   */\n  scaling(x: number, y: number, z: number): Mat4 {\n    this.identity();\n\n    this.data[0] = x;\n    this.data[5] = y;\n    this.data[10] = z;\n\n    return this;\n  }\n\n  /**\n   * Creates a new scaling matrix\n   * @param x X scale\n   * @param y Y scale\n   * @param z Z scale\n   * @returns A new scaling matrix\n   */\n  static scaling(x: number, y: number, z: number): Mat4 {\n    return new Mat4().scaling(x, y, z);\n  }\n\n  /**\n   * Creates a rotation matrix around the X axis\n   * @param angle Angle in radians\n   * @returns This matrix for chaining\n   */\n  rotationX(angle: number): Mat4 {\n    this.identity();\n\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    this.data[5] = c;\n    this.data[6] = s;\n    this.data[9] = -s;\n    this.data[10] = c;\n\n    return this;\n  }\n\n  /**\n   * Creates a new rotation matrix around the X axis\n   * @param angle Angle in radians\n   * @returns A new rotation matrix\n   */\n  static rotationX(angle: number): Mat4 {\n    return new Mat4().rotationX(angle);\n  }\n\n  /**\n   * Creates a rotation matrix around the Y axis\n   * @param angle Angle in radians\n   * @returns This matrix for chaining\n   */\n  rotationY(angle: number): Mat4 {\n    this.identity();\n\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    this.data[0] = c;\n    this.data[2] = -s;\n    this.data[8] = s;\n    this.data[10] = c;\n\n    return this;\n  }\n\n  /**\n   * Creates a new rotation matrix around the Y axis\n   * @param angle Angle in radians\n   * @returns A new rotation matrix\n   */\n  static rotationY(angle: number): Mat4 {\n    return new Mat4().rotationY(angle);\n  }\n\n  /**\n   * Creates a rotation matrix around the Z axis\n   * @param angle Angle in radians\n   * @returns This matrix for chaining\n   */\n  rotationZ(angle: number): Mat4 {\n    this.identity();\n\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    this.data[0] = c;\n    this.data[1] = s;\n    this.data[4] = -s;\n    this.data[5] = c;\n\n    return this;\n  }\n\n  /**\n   * Creates a new rotation matrix around the Z axis\n   * @param angle Angle in radians\n   * @returns A new rotation matrix\n   */\n  static rotationZ(angle: number): Mat4 {\n    return new Mat4().rotationZ(angle);\n  }\n\n  /**\n   * Creates a perspective projection matrix\n   * @param fov Field of view in radians\n   * @param aspect Aspect ratio (width / height)\n   * @param near Near clipping plane\n   * @param far Far clipping plane\n   * @returns This matrix for chaining\n   */\n  perspective(fov: number, aspect: number, near: number, far: number): Mat4 {\n    this.data.fill(0);\n\n    const f = 1.0 / Math.tan(fov / 2);\n\n    this.data[0] = f / aspect;\n    this.data[5] = f;\n    this.data[10] = (far + near) / (near - far);\n    this.data[11] = -1;\n    this.data[14] = (2 * far * near) / (near - far);\n\n    return this;\n  }\n\n  /**\n   * Creates a new perspective projection matrix\n   * @param fov Field of view in radians\n   * @param aspect Aspect ratio (width / height)\n   * @param near Near clipping plane\n   * @param far Far clipping plane\n   * @returns A new perspective projection matrix\n   */\n  static perspective(fov: number, aspect: number, near: number, far: number): Mat4 {\n    return new Mat4().perspective(fov, aspect, near, far);\n  }\n\n  /**\n   * Creates an orthographic projection matrix\n   * @param left Left clipping plane\n   * @param right Right clipping plane\n   * @param bottom Bottom clipping plane\n   * @param top Top clipping plane\n   * @param near Near clipping plane\n   * @param far Far clipping plane\n   * @returns This matrix for chaining\n   */\n  orthographic(\n    left: number, right: number,\n    bottom: number, top: number,\n    near: number, far: number\n  ): Mat4 {\n    this.data.fill(0);\n\n    this.data[0] = 2 / (right - left);\n    this.data[5] = 2 / (top - bottom);\n    this.data[10] = 2 / (near - far);\n\n    this.data[12] = (left + right) / (left - right);\n    this.data[13] = (bottom + top) / (bottom - top);\n    this.data[14] = (near + far) / (near - far);\n    this.data[15] = 1;\n\n    return this;\n  }\n\n  /**\n   * Creates a new orthographic projection matrix\n   * @param left Left clipping plane\n   * @param right Right clipping plane\n   * @param bottom Bottom clipping plane\n   * @param top Top clipping plane\n   * @param near Near clipping plane\n   * @param far Far clipping plane\n   * @returns A new orthographic projection matrix\n   */\n  static orthographic(\n    left: number, right: number,\n    bottom: number, top: number,\n    near: number, far: number\n  ): Mat4 {\n    return new Mat4().orthographic(left, right, bottom, top, near, far);\n  }\n\n  /**\n   * Creates a \"look at\" view matrix\n   * @param eye Eye position\n   * @param target Target position\n   * @param up Up vector\n   * @returns This matrix for chaining\n   */\n  lookAt(\n    eye: [number, number, number],\n    target: [number, number, number],\n    up: [number, number, number] = [0, 1, 0]\n  ): Mat4 {\n    const z = Vec3.normalize(Vec3.subtract(eye, target));\n\n    // Handle case where eye and target are the same position\n    if (z[0] === 0 && z[1] === 0 && z[2] === 0) {\n      return this.identity();\n    }\n\n    const x = Vec3.normalize(Vec3.cross(up, z));\n\n    // Handle case where up and z are parallel\n    if (x[0] === 0 && x[1] === 0 && x[2] === 0) {\n      // Choose a different up vector\n      const newUp: [number, number, number] =\n        Math.abs(z[0]) < 0.9 ? [1, 0, 0] : [0, 0, 1];\n      return this.lookAt(eye, target, newUp);\n    }\n\n    const y = Vec3.cross(z, x);\n\n    this.data[0] = x[0];\n    this.data[1] = y[0];\n    this.data[2] = z[0];\n    this.data[3] = 0;\n\n    this.data[4] = x[1];\n    this.data[5] = y[1];\n    this.data[6] = z[1];\n    this.data[7] = 0;\n\n    this.data[8] = x[2];\n    this.data[9] = y[2];\n    this.data[10] = z[2];\n    this.data[11] = 0;\n\n    this.data[12] = -Vec3.dot(x, eye);\n    this.data[13] = -Vec3.dot(y, eye);\n    this.data[14] = -Vec3.dot(z, eye);\n    this.data[15] = 1;\n\n    return this;\n  }\n\n  /**\n   * Creates a new \"look at\" view matrix\n   * @param eye Eye position\n   * @param target Target position\n   * @param up Up vector\n   * @returns A new \"look at\" view matrix\n   */\n  static lookAt(\n    eye: [number, number, number],\n    target: [number, number, number],\n    up: [number, number, number] = [0, 1, 0]\n  ): Mat4 {\n    return new Mat4().lookAt(eye, target, up);\n  }\n}\n\n/**\n * Vector3 class for 3D vector operations\n */\nexport class Vec3 {\n  /**\n   * Normalizes a 3-component vector\n   * @param v The vector to normalize\n   * @returns The normalized vector\n   */\n  static normalize(v: [number, number, number]): [number, number, number] {\n    const length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n    if (length > 0.00001) {\n      return [v[0] / length, v[1] / length, v[2] / length];\n    }\n    return [0, 0, 0];\n  }\n\n  /**\n   * Computes the cross product of two 3-component vectors\n   * @param a The first vector\n   * @param b The second vector\n   * @returns The cross product vector\n   */\n  static cross(a: [number, number, number], b: [number, number, number]): [number, number, number] {\n    return [\n      a[1] * b[2] - a[2] * b[1],\n      a[2] * b[0] - a[0] * b[2],\n      a[0] * b[1] - a[1] * b[0]\n    ];\n  }\n\n  /**\n   * Computes the dot product of two 3-component vectors\n   * @param a The first vector\n   * @param b The second vector\n   * @returns The dot product\n   */\n  static dot(a: [number, number, number], b: [number, number, number]): number {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n\n  /**\n   * Subtracts vector b from vector a\n   * @param a The first vector\n   * @param b The second vector\n   * @returns The resulting vector\n   */\n  static subtract(a: [number, number, number], b: [number, number, number]): [number, number, number] {\n    return [\n      a[0] - b[0],\n      a[1] - b[1],\n      a[2] - b[2]\n    ];\n  }\n\n  /**\n   * Adds vector b to vector a\n   * @param a The first vector\n   * @param b The second vector\n   * @returns The resulting vector\n   */\n  static add(a: [number, number, number], b: [number, number, number]): [number, number, number] {\n    return [\n      a[0] + b[0],\n      a[1] + b[1],\n      a[2] + b[2]\n    ];\n  }\n\n  /**\n   * Scales a vector by a scalar\n   * @param v The vector\n   * @param s The scalar\n   * @returns The scaled vector\n   */\n  static scale(v: [number, number, number], s: number): [number, number, number] {\n    return [\n      v[0] * s,\n      v[1] * s,\n      v[2] * s\n    ];\n  }\n\n  /**\n   * Calculates the length of a vector\n   * @param v The vector\n   * @returns The length\n   */\n  static magnitude(v: [number, number, number]): number {\n    return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n  }\n}\n\n/**\n * Vector2 class for 2D vector operations\n */\nexport class Vec2 {\n  /**\n   * Normalizes a 2-component vector\n   * @param v The vector to normalize\n   * @returns The normalized vector\n   */\n  static normalize(v: [number, number]): [number, number] {\n    const length = Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n    if (length > 0.00001) {\n      return [v[0] / length, v[1] / length];\n    }\n    return [0, 0];\n  }\n\n  /**\n   * Computes the dot product of two 2-component vectors\n   * @param a The first vector\n   * @param b The second vector\n   * @returns The dot product\n   */\n  static dot(a: [number, number], b: [number, number]): number {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n\n  /**\n   * Subtracts vector b from vector a\n   * @param a The first vector\n   * @param b The second vector\n   * @returns The resulting vector\n   */\n  static subtract(a: [number, number], b: [number, number]): [number, number] {\n    return [\n      a[0] - b[0],\n      a[1] - b[1]\n    ];\n  }\n\n  /**\n   * Adds vector b to vector a\n   * @param a The first vector\n   * @param b The second vector\n   * @returns The resulting vector\n   */\n  static add(a: [number, number], b: [number, number]): [number, number] {\n    return [\n      a[0] + b[0],\n      a[1] + b[1]\n    ];\n  }\n\n  /**\n   * Scales a vector by a scalar\n   * @param v The vector\n   * @param s The scalar\n   * @returns The scaled vector\n   */\n  static scale(v: [number, number], s: number): [number, number] {\n    return [\n      v[0] * s,\n      v[1] * s\n    ];\n  }\n\n  /**\n   * Calculates the length of a vector\n   * @param v The vector\n   * @returns The length\n   */\n  static magnitude(v: [number, number]): number {\n    return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n  }\n}","import { Mat4 } from \"../math/mat4\"\nimport { RenderObject } from \"./render-object\";\n\nexport class WebGPURenderer {\n  private device: GPUDevice | null = null;\n  private context: GPUCanvasContext | null = null;\n  private canvas: HTMLCanvasElement | null = null;\n  private presentationFormat: GPUTextureFormat = 'bgra8unorm';\n  private depthFormat: GPUTextureFormat = 'depth24plus';\n  private depthTexture: GPUTexture | null = null;\n  private RenderObjects: RenderObject[] = [];\n  private cameraUniformBuffer: GPUBuffer | null = null;\n  private cameraBindGroup: GPUBindGroup | null = null;\n  private viewMatrix: Mat4 = Mat4.identity();\n  private projectionMatrix: Mat4 = Mat4.identity();\n\n  /**\n   * Get the Device instance\n   * @returns GPUDevice\n   */\n  public getDevice(): GPUDevice | null {\n    return this.device;\n  }\n\n  /**\n   * Get the HTMLCanvas instance\n   * @returns HTMLCanvas that is used to preset texture from swapchain\n   */\n  public getCanvas(): HTMLCanvasElement | null {\n    return this.canvas;\n  }\n\n  /**\n   * Create a new WebGPU renderer\n   * @param canvas The canvas element to render to\n   */\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n  }\n\n  /**\n   * Initialize the WebGPU renderer\n   * @returns Promise that resolves when initialization is complete\n   */\n  async initialize(): Promise<boolean> {\n    if (!navigator.gpu) {\n      console.error(\"WebGPU is not supported in this browser.\");\n      return false;\n    }\n\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n      console.error(\"Couldn't request WebGPU adapter.\");\n      return false;\n    }\n\n    this.device = await adapter.requestDevice();\n    if (!this.device) {\n      console.error(\"Couldn't request WebGPU device.\");\n      return false;\n    }\n\n    this.context = this.canvas!.getContext('webgpu');\n    if (!this.context) {\n      console.error(\"Couldn't get WebGPU context from canvas.\");\n      return false;\n    }\n\n    this.presentationFormat = navigator.gpu.getPreferredCanvasFormat();\n    this.context.configure({\n      device: this.device,\n      format: this.presentationFormat,\n      alphaMode: 'premultiplied'\n    });\n\n    // Create camera uniform buffer\n    this.cameraUniformBuffer = this.device.createBuffer({\n      // TODO (David): this is very retarded, find better way to know size, maybe at compile time\n      size: 4 * 16 * 2, // ViewProjection matrix (4x4) + View matrix (4x4)\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\n    });\n\n    const cameraBindGroupLayout = this.device.createBindGroupLayout({\n      entries: [{\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: { type: 'uniform' }\n      } as any]\n    });\n\n    this.cameraBindGroup = this.device.createBindGroup({\n      layout: cameraBindGroupLayout,\n      entries: [{\n        binding: 0,\n        resource: { buffer: this.cameraUniformBuffer }\n      }]\n    });\n\n    return true;\n  }\n\n  /**\n   * Resize the renderer to match the canvas size\n   */\n  resize() {\n    if (!this.canvas || !this.device || !this.context) return;\n\n    const width = this.canvas.clientWidth * window.devicePixelRatio;\n    const height = this.canvas.clientHeight * window.devicePixelRatio;\n    this.canvas.width = width;\n    this.canvas.height = height;\n\n    if (this.depthTexture) {\n      this.depthTexture.destroy();\n    }\n\n    this.depthTexture = this.device.createTexture({\n      size: { width, height, depthOrArrayLayers: 1 },\n      format: this.depthFormat,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT\n    });\n  }\n\n  /**\n   * Add an object to the scene\n   * @param object The object to add to the scene\n   */\n  addObject(object: RenderObject) {\n    this.RenderObjects.push(object);\n    if (this.device) {\n      object.initialize(this.device);\n    }\n  }\n\n  /**\n   * Remove an object from the scene\n   * @param object The object to remove from the scene\n   */\n  removeObject(object: RenderObject) {\n    const index = this.RenderObjects.indexOf(object);\n    if (index !== -1) {\n      this.RenderObjects.splice(index, 1);\n    }\n  }\n\n  /**\n   * Update the camera matrices\n   * @param viewMatrix The view matrix\n   * @param projectionMatrix The projection matrix\n   */\n  updateCamera(viewMatrix: Mat4, projectionMatrix: Mat4) {\n    if (!this.device || !this.cameraUniformBuffer) return;\n\n    // Store matrices\n    this.viewMatrix = viewMatrix;\n    this.projectionMatrix = projectionMatrix;\n    const viewProjectionMatrix = Mat4.multiply(projectionMatrix, viewMatrix);\n\n    // Note (David): write to uniform buffer (above we have bind group for this)\n    this.device.queue.writeBuffer(this.cameraUniformBuffer, 0, viewProjectionMatrix.data);\n    this.device.queue.writeBuffer(this.cameraUniformBuffer, 64, viewMatrix.data);\n  }\n\n  /**\n   * Update the camera matrices using Float32Array (for compatibility)\n   * @param viewMatrixArray The view matrix as Float32Array\n   * @param projectionMatrixArray The projection matrix as Float32Array\n   */\n  updateCameraFromArrays(viewMatrixArray: Float32Array, projectionMatrixArray: Float32Array) {\n    const viewMatrix = new Mat4(viewMatrixArray);\n    const projectionMatrix = new Mat4(projectionMatrixArray);\n\n    this.updateCamera(viewMatrix, projectionMatrix);\n  }\n\n  /**\n   * Render the scene\n   */\n  render() {\n    if (!this.device || !this.context || !this.depthTexture) return;\n\n    const colorTexture = this.context.getCurrentTexture();\n    const colorView = colorTexture.createView();\n    const depthView = this.depthTexture.createView();\n\n    const commandEncoder = this.device.createCommandEncoder();\n\n    const renderPass = commandEncoder.beginRenderPass({\n      colorAttachments: [{\n        view: colorView,\n        clearValue: { r: 0.1, g: 0.1, b: 0.1, a: 1.0 },\n        loadOp: 'clear',\n        storeOp: 'store'\n      } as any],\n      depthStencilAttachment: {\n        view: depthView,\n        depthClearValue: 1.0,\n        depthLoadOp: 'clear',\n        depthStoreOp: 'store'\n      }\n    });\n\n    for (const object of this.RenderObjects) {\n      renderPass.setPipeline(object.pipeline!);\n      renderPass.setBindGroup(0, this.cameraBindGroup!);\n\n      if (object.bindGroup) {\n        renderPass.setBindGroup(1, object.bindGroup);\n      }\n\n      renderPass.setVertexBuffer(0, object.vertexBuffer!);\n\n      if (object.instanceBuffer) {\n        renderPass.setVertexBuffer(1, object.instanceBuffer);\n      }\n\n      if (object.indexBuffer) {\n        renderPass.setIndexBuffer(object.indexBuffer, 'uint16');\n        renderPass.drawIndexed(object.indexCount, object.instanceCount);\n      } else {\n        renderPass.draw(object.vertexCount, object.instanceCount);\n      }\n    }\n\n    renderPass.end();\n    this.device.queue.submit([commandEncoder.finish()]);\n  }\n\n  /**\n   * Sets up a perspective camera\n   * @param fov Field of view in radians\n   * @param aspect Aspect ratio (width / height)\n   * @param near Near clipping plane\n   * @param far Far clipping plane\n   * @param eye Eye position\n   * @param target Target position\n   * @param up Up vector\n   */\n  setupPerspectiveCamera(\n    fov: number,\n    aspect: number,\n    near: number,\n    far: number,\n    eye: [number, number, number],\n    target: [number, number, number],\n    up: [number, number, number] = [0, 1, 0]\n  ): void {\n    const view = Mat4.lookAt(eye, target, up);\n    const projection = Mat4.perspective(fov, aspect, near, far);\n    this.updateCamera(view, projection);\n  }\n\n  /**\n   * Sets up an orthographic camera\n   * @param left Left clipping plane\n   * @param right Right clipping plane\n   * @param bottom Bottom clipping plane\n   * @param top Top clipping plane\n   * @param near Near clipping plane\n   * @param far Far clipping plane\n   */\n  setupOrthographicCamera(\n    left: number,\n    right: number,\n    bottom: number,\n    top: number,\n    near: number,\n    far: number\n  ): void {\n    const view = Mat4.identity();\n    const projection = Mat4.orthographic(left, right, bottom, top, near, far);\n    this.updateCamera(view, projection);\n  }\n\n  /**\n   * Gets the current view matrix\n   * @returns The current view matrix\n   */\n  getViewMatrix(): Mat4 {\n    return this.viewMatrix.clone();\n  }\n\n  /**\n   * Gets the current projection matrix\n   * @returns The current projection matrix\n   */\n  getProjectionMatrix(): Mat4 {\n    return this.projectionMatrix.clone();\n  }\n}\n","export const DEFAULT_3D_SHADER = \n`\nstruct Camera {\n  viewProjectionMatrix: mat4x4<f32>,\n  viewMatrix: mat4x4<f32>\n}\n\n@group(0) @binding(0) var<uniform> camera: Camera;\n\nstruct VertexInput {\n  @location(0) position: vec3<f32>,\n  @location(1) normal: vec3<f32>,\n  @location(2) uv: vec2<f32>,\n  @location(3) model_row0: vec4<f32>,\n  @location(4) model_row1: vec4<f32>,\n  @location(5) model_row2: vec4<f32>,\n  @location(6) model_row3: vec4<f32>,\n}\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) normal: vec3<f32>,\n  @location(1) uv: vec2<f32>,\n  @location(2) worldPos: vec3<f32>\n}\n\n@vertex\nfn vertexMain(input: VertexInput) -> VertexOutput {\n  var output: VertexOutput;\n  let model = mat4x4<f32>(\n    input.model_row0,\n    input.model_row1,\n    input.model_row2,\n    input.model_row3\n  );\n  \n  let worldPos = model * vec4<f32>(input.position, 1.0);\n  output.position = camera.viewProjectionMatrix * worldPos;\n  output.worldPos = worldPos.xyz;\n  \n  let normalMatrix = mat3x3<f32>(\n    model[0].xyz,\n    model[1].xyz,\n    model[2].xyz\n  );\n\n  output.normal = normalize(normalMatrix * input.normal);\n  output.uv = input.uv;\n  \n  return output;\n}\n\n@fragment\nfn fragmentMain(input: VertexOutput) -> @location(0) vec4<f32> {\n  let lightDir = normalize(vec3<f32>(0.5, 1.0, 0.3));\n  let ambient = 0.2;\n  let diffuse = max(dot(input.normal, lightDir), 0.0);\n  let color = input.normal * 0.5 + 0.5;\n  return vec4<f32>(color * (ambient + diffuse), 1.0);\n}`;\n\nexport const DEFAULT_2D_SHADER = `\nstruct Camera {\n  viewProjectionMatrix: mat4x4<f32>,\n  viewMatrix: mat4x4<f32>\n}\n\n@group(0) @binding(0) var<uniform> camera: Camera;\n\nstruct VertexInput {\n  @location(0) position: vec2<f32>,\n  @location(1) uv: vec2<f32>,\n  @location(2) instancePos: vec2<f32>,\n  @location(3) instanceRot: f32,\n  @location(4) instanceScale: vec2<f32>,\n  @location(5) instanceColor: vec4<f32>\n}\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) uv: vec2<f32>,\n  @location(1) color: vec4<f32>\n}\n\n@vertex\nfn vertexMain(input: VertexInput) -> VertexOutput {\n  var output: VertexOutput;\n\n  let cosRot = cos(input.instanceRot);\n  let sinRot = sin(input.instanceRot);\n  let rotMat = mat2x2<f32>(\n    cosRot, sinRot,\n    -sinRot, cosRot\n  );\n  \n  let scaledPos = input.position * input.instanceScale;\n  let rotatedPos = rotMat * scaledPos;\n  let finalPos = vec4<f32>(rotatedPos + input.instancePos, 0.0, 1.0);\n  \n  output.position = camera.viewProjectionMatrix * finalPos;\n  output.uv = input.uv;\n  output.color = input.instanceColor;\n  \n  return output;\n}\n\n@fragment\nfn fragmentMain(input: VertexOutput) -> @location(0) vec4<f32> {\n  return input.color;\n}`;","export abstract class RenderObject {\n  pipeline: GPURenderPipeline | null = null;\n  vertexBuffer: GPUBuffer | null = null;\n  indexBuffer: GPUBuffer | null = null;\n  instanceBuffer: GPUBuffer | null = null;\n  bindGroup: GPUBindGroup | null = null;\n  vertexCount: number = 0;\n  indexCount: number = 0;\n  instanceCount: number = 1;\n\n  /**\n   * Initialize the object's GPU resources\n   * @param device The GPU device\n   */\n  abstract initialize(device: GPUDevice): void;\n\n  /**\n   * Update the object's instance data\n   * @param device The GPU device\n   * @param instanceData The instance data to update\n   */\n  updateInstanceData(device: GPUDevice, instanceData: Float32Array) {\n    if (!this.instanceBuffer) return;\n    device.queue.writeBuffer(this.instanceBuffer, 0, instanceData);\n  }\n}","import { Mat4 } from '../math/mat4';\n\nimport { DEFAULT_3D_SHADER } from './default-program';\nimport { RenderObject } from './render-object';\n\nexport class Object3D extends RenderObject {\n  private vertices: Float32Array;\n  private indices?: Uint16Array;\n  private shader: string;\n  private instanceDataSize: number;\n\n  /**\n   * Create a new 3D object\n   * @param vertices The vertex data in the format [x, y, z, nx, ny, nz, u, v,\n   *     ...]\n   * @param indices The index data (optional)\n   * @param shader The shader code\n   * @param instanceDataSize The size of each instance data in bytes\n   */\n  constructor(\n    vertices: Float32Array, indices?: Uint16Array, shader?: string,\n    instanceDataSize: number = 64) {\n    super();\n    this.vertices = vertices;\n    this.indices = indices;\n    this.shader = shader || DEFAULT_3D_SHADER;\n    this.instanceDataSize = instanceDataSize;\n\n    this.vertexCount =\n      vertices.length / 8;  // 8 floats per vertex (position, normal, uv)\n    this.indexCount = indices ? indices.length : 0;\n  }\n\n  /**\n   * Initialize the object's GPU resources\n   * @param device The GPU device\n   */\n  initialize(device: GPUDevice): void {\n    this.vertexBuffer = device.createBuffer({\n      size: this.vertices.byteLength,\n      usage: GPUBufferUsage.VERTEX,\n      mappedAtCreation: true,\n    });\n\n    new Float32Array(this.vertexBuffer.getMappedRange()).set(this.vertices);\n    this.vertexBuffer.unmap();\n\n    if (this.indices) {\n      this.indexBuffer = device.createBuffer({\n        size: this.indices.byteLength,\n        usage: GPUBufferUsage.INDEX,\n        mappedAtCreation: true,\n      });\n      new Uint16Array(this.indexBuffer.getMappedRange()).set(this.indices);\n      this.indexBuffer.unmap();\n    }\n\n    this.instanceBuffer = device.createBuffer({\n      size: this.instanceDataSize * this.instanceCount,\n      usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n    });\n\n    const materialBuffer = device.createBuffer({\n      size: 16,  // min buffer size\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n\n    const bindGroupLayout = device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,\n          buffer: { type: 'uniform' },\n        } as any,\n      ],\n    });\n\n    this.bindGroup = device.createBindGroup({\n      layout: bindGroupLayout,\n      entries: [\n        {\n          binding: 0,\n          resource: { buffer: materialBuffer },\n        },\n      ],\n    });\n\n    const pipelineLayout = device.createPipelineLayout({\n      bindGroupLayouts: [\n        // @Camera bind group\n        device.createBindGroupLayout({\n          entries: [\n            {\n              binding: 0,\n              visibility: GPUShaderStage.VERTEX,\n              buffer: { type: 'uniform' },\n            } as any,\n          ],\n        }),\n        bindGroupLayout,\n      ],\n    });\n\n    const shaderModule = device.createShaderModule({\n      code: this.shader,\n    });\n\n    this.pipeline = device.createRenderPipeline({\n      layout: pipelineLayout,\n      vertex: {\n        module: shaderModule,\n        entryPoint: 'vertexMain',\n        buffers: [\n          // @VertexBuffer @Layout\n          {\n            arrayStride: 8 * 4,  // 8 floats per vertex (position, normal, uv)\n            attributes: [\n              { shaderLocation: 0, offset: 0, format: 'float32x3' },  // position\n              {\n                shaderLocation: 1,\n                offset: 3 * 4,\n                format: 'float32x3'\n              },  // normal\n              { shaderLocation: 2, offset: 6 * 4, format: 'float32x2' },  // uv\n            ],\n          },\n          // @InstanceBuffer @Layout\n          {\n            arrayStride: this.instanceDataSize,\n            stepMode: 'instance',\n            attributes: [\n              {\n                shaderLocation: 3,\n                offset: 0,\n                format: 'float32x4'\n              },  // modelMatrix (row 0)\n              {\n                shaderLocation: 4,\n                offset: 16,\n                format: 'float32x4'\n              },  // modelMatrix (row 1)\n              {\n                shaderLocation: 5,\n                offset: 32,\n                format: 'float32x4'\n              },  // modelMatrix (row 2)\n              {\n                shaderLocation: 6,\n                offset: 48,\n                format: 'float32x4'\n              },  // modelMatrix (row 3)\n            ],\n          },\n        ] as any,\n      },\n      fragment: {\n        module: shaderModule,\n        entryPoint: 'fragmentMain',\n        targets: [{ format: navigator.gpu.getPreferredCanvasFormat() }],\n      },\n      primitive: {\n        topology: 'triangle-list',\n        cullMode: 'back',\n      },\n      depthStencil: {\n        depthWriteEnabled: true,\n        depthCompare: 'less',\n        format: 'depth24plus',\n      },\n    });\n  }\n\n  /**\n   * Set the instance count and resize the instance buffer if needed\n   * @param device The GPU device\n   * @param count The new instance count\n   */\n  setInstanceCount(device: GPUDevice, count: number) {\n    if (count > this.instanceCount) {\n      // Resize the instance buffer if needed\n      if (this.instanceBuffer) {\n        this.instanceBuffer.destroy();\n      }\n\n      this.instanceBuffer = device.createBuffer({\n        size: this.instanceDataSize * count,\n        usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n      });\n    }\n\n    this.instanceCount = count;\n  }\n\n  /**\n   * Update instance data using Mat4 matrices\n   * @param device The GPU device\n   * @param matrices Array of transformation matrices\n   */\n  updateInstanceMatrices(device: GPUDevice, matrices: Mat4[]) {\n    if (!this.instanceBuffer) return;\n\n    // merge into a single Float32Array\n    const instanceData = new Float32Array(matrices.length * 16);\n    for (let i = 0; i < matrices.length; i++) {\n      const offset = i * 16;\n      for (let j = 0; j < 16; j++) {\n        instanceData[offset + j] = matrices[i].data[j];\n      }\n    }\n\n    device.queue.writeBuffer(this.instanceBuffer, 0, instanceData);\n  }\n}\n","import { DEFAULT_2D_SHADER } from \"./default-program\";\nimport { RenderObject } from \"./render-object\";\n\nexport class Object2D extends RenderObject {\n  private vertices: Float32Array;\n  private indices?: Uint16Array;\n  private shader: string;\n  private instanceDataSize: number;\n  \n  /**\n   * Create a new 2D object\n   * @param vertices The vertex data in the format [x, y, u, v, ...]\n   * @param indices The index data (optional)\n   * @param shader The shader code\n   * @param instanceDataSize The size of each instance data in bytes\n   */\n  constructor(\n    vertices: Float32Array,\n    indices?: Uint16Array,\n    shader?: string,\n    instanceDataSize: number = 36\n  ) {\n    super();\n    this.vertices = vertices;\n    this.indices = indices;\n    this.shader = shader || DEFAULT_2D_SHADER;\n    this.instanceDataSize = instanceDataSize;\n    \n    this.vertexCount = vertices.length / 4; // 4 floats per vertex (position, uv)\n    this.indexCount = indices ? indices.length : 0;\n  }\n  \n  /**\n   * Initialize the object's GPU resources\n   * @param device The GPU device\n   */\n  initialize(device: GPUDevice): void {\n    this.vertexBuffer = device.createBuffer({\n      size: this.vertices.byteLength,\n      usage: GPUBufferUsage.VERTEX,\n      mappedAtCreation: true\n    });\n    \n    new Float32Array(this.vertexBuffer.getMappedRange()).set(this.vertices);\n    this.vertexBuffer.unmap();\n    \n    if (this.indices) {\n      this.indexBuffer = device.createBuffer({\n        size: this.indices.byteLength,\n        usage: GPUBufferUsage.INDEX,\n        mappedAtCreation: true\n      });\n      new Uint16Array(this.indexBuffer.getMappedRange()).set(this.indices);\n      this.indexBuffer.unmap();\n    }\n    \n    this.instanceBuffer = device.createBuffer({\n      size: this.instanceDataSize * this.instanceCount,\n      usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST\n    });\n    \n    const shaderModule = device.createShaderModule({\n      code: this.shader\n    });\n    \n    const pipelineLayout = device.createPipelineLayout({\n      bindGroupLayouts: [\n        device.createBindGroupLayout({\n          entries: [{\n            binding: 0,\n            visibility: GPUShaderStage.VERTEX,\n            buffer: { type: 'uniform' }\n          }] as any\n        })\n      ]\n    });\n    \n    this.pipeline = device.createRenderPipeline({\n      layout: pipelineLayout,\n      vertex: {\n        module: shaderModule,\n        entryPoint: 'vertexMain',\n        buffers: [\n          // @VertexBuffer @Layout\n          {\n            arrayStride: 4 * 4, // 4 floats per vertex (position, uv)\n            attributes: [\n              { shaderLocation: 0, offset: 0, format: 'float32x2' }, // position\n              { shaderLocation: 1, offset: 2 * 4, format: 'float32x2' }  // uv\n            ]\n          },\n          // @InstanceBuffer @Layout\n          {\n            arrayStride: this.instanceDataSize,\n            stepMode: 'instance',\n            attributes: [\n              { shaderLocation: 2, offset: 0, format: 'float32x2' },  // position\n              { shaderLocation: 3, offset: 8, format: 'float32' },    // rotation\n              { shaderLocation: 4, offset: 12, format: 'float32x2' }, // scale\n              { shaderLocation: 5, offset: 20, format: 'float32x4' }  // color (RGBA)\n            ]\n          }\n        ] as any\n      },\n      fragment: {\n        module: shaderModule,\n        entryPoint: 'fragmentMain',\n        targets: [{ \n          format: navigator.gpu.getPreferredCanvasFormat(),\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha',\n              operation: 'add'\n            },\n            alpha: {\n              srcFactor: 'one',\n              dstFactor: 'one-minus-src-alpha', \n              operation: 'add'\n            }\n          }\n        }] as any\n      },\n      primitive: {\n        topology: 'triangle-list'\n      },\n      depthStencil: {\n        depthWriteEnabled: true,\n        depthCompare: 'less',\n        format: 'depth24plus'\n      }\n    });\n  }\n  \n  /**\n   * Set the instance count and resize the instance buffer if needed\n   * @param device The GPU device\n   * @param count The new instance count\n   */\n  setInstanceCount(device: GPUDevice, count: number) {\n    if (count > this.instanceCount) {\n      if (this.instanceBuffer) {\n        this.instanceBuffer.destroy();\n      }\n      \n      this.instanceBuffer = device.createBuffer({\n        size: this.instanceDataSize * count,\n        usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST\n      });\n    }\n    \n    this.instanceCount = count;\n  }\n}\n","export class Geometry {\n  /**\n   * Create a quad geometry for 2D rendering\n   * @returns The quad vertices and indices\n   */\n  static createQuad(): { vertices: Float32Array, indices: Uint16Array } {\n    const vertices = new Float32Array([\n      -0.5, -0.5, 0, 0,\n      0.5, -0.5, 1, 0,\n      0.5, 0.5, 1, 1,\n      -0.5, 0.5, 0, 1\n    ]);\n\n    const indices = new Uint16Array([\n      0, 1, 2,\n      0, 2, 3\n    ]);\n\n    return { vertices, indices };\n  }\n\n  /**\n   * Create a cube geometry for 3D rendering\n   * @returns The cube vertices and indices\n   */\n  static createCube(): { vertices: Float32Array, indices: Uint16Array } {\n    const vertices = new Float32Array([\n      // Front face\n      -0.5, -0.5, 0.5, 0, 0, 1, 0, 0, // Bottom-left\n      0.5, -0.5, 0.5, 0, 0, 1, 1, 0, // Bottom-right\n      0.5, 0.5, 0.5, 0, 0, 1, 1, 1, // Top-right\n      -0.5, 0.5, 0.5, 0, 0, 1, 0, 1, // Top-left\n\n      // Back face\n      -0.5, -0.5, -0.5, 0, 0, -1, 1, 0, // Bottom-left\n      -0.5, 0.5, -0.5, 0, 0, -1, 1, 1, // Top-left\n      0.5, 0.5, -0.5, 0, 0, -1, 0, 1, // Top-right\n      0.5, -0.5, -0.5, 0, 0, -1, 0, 0, // Bottom-right\n\n      // Top face\n      -0.5, 0.5, -0.5, 0, 1, 0, 0, 1, // Back-left\n      -0.5, 0.5, 0.5, 0, 1, 0, 0, 0, // Front-left\n      0.5, 0.5, 0.5, 0, 1, 0, 1, 0, // Front-right\n      0.5, 0.5, -0.5, 0, 1, 0, 1, 1, // Back-right\n\n      // Bottom face\n      -0.5, -0.5, -0.5, 0, -1, 0, 1, 1, // Back-left\n      0.5, -0.5, -0.5, 0, -1, 0, 0, 1, // Back-right\n      0.5, -0.5, 0.5, 0, -1, 0, 0, 0, // Front-right\n      -0.5, -0.5, 0.5, 0, -1, 0, 1, 0, // Front-left\n\n      // Right face\n      0.5, -0.5, -0.5, 1, 0, 0, 1, 0, // Back-bottom\n      0.5, 0.5, -0.5, 1, 0, 0, 1, 1, // Back-top\n      0.5, 0.5, 0.5, 1, 0, 0, 0, 1, // Front-top\n      0.5, -0.5, 0.5, 1, 0, 0, 0, 0, // Front-bottom\n\n      // Left face\n      -0.5, -0.5, -0.5, -1, 0, 0, 0, 0, // Back-bottom\n      -0.5, -0.5, 0.5, -1, 0, 0, 1, 0, // Front-bottom\n      -0.5, 0.5, 0.5, -1, 0, 0, 1, 1, // Front-top\n      -0.5, 0.5, -0.5, -1, 0, 0, 0, 1  // Back-top\n    ]);\n\n    const indices = new Uint16Array([\n      0, 1, 2, 0, 2, 3,  // front\n      4, 5, 6, 4, 6, 7,  // back\n      8, 9, 10, 8, 10, 11, // top\n      12, 13, 14, 12, 14, 15, // bottom\n      16, 17, 18, 16, 18, 19, // right\n      20, 21, 22, 20, 22, 23  // left\n    ]);\n\n    return { vertices, indices };\n  }\n\n  /**\n   * Create a sphere geometry for 3D rendering\n   * @param radius The radius of the sphere\n   * @param latitudeBands The number of latitude bands\n   * @param longitudeBands The number of longitude bands\n   * @returns The sphere vertices and indices\n   */\n  static createSphere(radius: number = 1, latitudeBands: number = 16, longitudeBands: number = 16): { vertices: Float32Array, indices: Uint16Array } {\n    const vertices = [];\n    const indices = [];\n\n    // Generate vertices\n    for (let lat = 0; lat <= latitudeBands; lat++) {\n      const theta = lat * Math.PI / latitudeBands;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n\n      for (let lon = 0; lon <= longitudeBands; lon++) {\n        const phi = lon * 2 * Math.PI / longitudeBands;\n        const sinPhi = Math.sin(phi);\n        const cosPhi = Math.cos(phi);\n\n        const x = cosPhi * sinTheta;\n        const y = cosTheta;\n        const z = sinPhi * sinTheta;\n        const u = 1 - (lon / longitudeBands);\n        const v = 1 - (lat / latitudeBands);\n\n        vertices.push(\n          radius * x, radius * y, radius * z, // position\n          x, y, z,                            // normal\n          u, v                                // uv\n        );\n      }\n    }\n\n    for (let lat = 0; lat < latitudeBands; lat++) {\n      for (let lon = 0; lon < longitudeBands; lon++) {\n        const first = (lat * (longitudeBands + 1)) + lon;\n        const second = first + longitudeBands + 1;\n\n        indices.push(first, first + 1, second);\n        indices.push(second, first + 1, second + 1);\n      }\n    }\n\n    return {\n      vertices: new Float32Array(vertices),\n      indices: new Uint16Array(indices)\n    };\n  }\n\n  /**\n   * Create a plane geometry for 3D rendering\n   * @param width The width of the plane\n   * @param height The height of the plane\n   * @param widthSegments The number of width segments\n   * @param heightSegments The number of height segments\n   * @returns The plane vertices and indices\n   */\n  static createPlane(width: number = 1, height: number = 1, widthSegments: number = 1, heightSegments: number = 1): { vertices: Float32Array, indices: Uint16Array } {\n    const vertices = [];\n    const indices = [];\n\n    const widthHalf = width / 2;\n    const heightHalf = height / 2;\n\n    const gridX = widthSegments;\n    const gridY = heightSegments;\n\n    const segmentWidth = width / gridX;\n    const segmentHeight = height / gridY;\n\n    for (let iy = 0; iy <= gridY; iy++) {\n      const y = iy * segmentHeight - heightHalf;\n\n      for (let ix = 0; ix <= gridX; ix++) {\n        const x = ix * segmentWidth - widthHalf;\n\n        vertices.push(\n          x, 0, y,    // position\n          0, 1, 0,    // normal (up)\n          ix / gridX, 1 - (iy / gridY) // uv\n        );\n      }\n    }\n\n    for (let iy = 0; iy < gridY; iy++) {\n      for (let ix = 0; ix < gridX; ix++) {\n        const a = ix + (gridX + 1) * iy;\n        const b = ix + (gridX + 1) * (iy + 1);\n        const c = (ix + 1) + (gridX + 1) * (iy + 1);\n        const d = (ix + 1) + (gridX + 1) * iy;\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    return {\n      vertices: new Float32Array(vertices),\n      indices: new Uint16Array(indices)\n    };\n  }\n}","import { WebGPURenderer } from \"./renderer/renderer\";\nimport { Object3D } from \"./renderer/object3d\";\nimport { Object2D } from \"./renderer/object2d\";\n\nimport { Mat4 } from \"./math/mat4\";\nimport { Geometry } from \"./utils/geometry\";\n\nasync function initRenderer(canvas: HTMLCanvasElement) {\n  if (!canvas) {\n    console.error('Canvas element not found');\n    return null;\n  }\n\n  const renderer = new WebGPURenderer(canvas);\n  const initialized = await renderer.initialize();\n  if (!initialized) {\n    console.error('Failed to initialize WebGPU renderer');\n    return null;\n  }\n\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n\n  renderer.resize();\n\n  // Todo (David): re-crate target textures to have true resize\n  return renderer;\n}\n\nasync function create3DScene(canvas: HTMLCanvasElement) {\n  const renderer = await initRenderer(canvas);\n  if (!renderer) return;\n\n  const { vertices, indices } = Geometry.createSphere(.1, 16, 16);\n  const cubeObject = new Object3D(vertices, indices);\n\n  renderer.addObject(cubeObject);\n\n  const aspect = renderer.getCanvas()!.width / renderer.getCanvas()!.height;\n  renderer.setupPerspectiveCamera(Math.PI / 4, aspect, 0.1, 100.0, [0, 0, 0], [0, 0, 0], [0, 1, 0]);\n\n  const instanceCount = 1000;\n  cubeObject.setInstanceCount(renderer.getDevice()!, instanceCount);\n  const instanceMatrices: Mat4[] = Array(instanceCount).fill(null).map(() => Mat4.identity());\n\n  // let mouseX = 0;\n  // let mouseY = 0;\n\n  // document.addEventListener(\"mousemove\", (event: MouseEvent) => {\n  //   const rect = canvas.getBoundingClientRect();\n  //   const scaleX = canvas.width / rect.width;\n  //   const scaleY = canvas.height / rect.height;\n\n  //   mouseX = ((event.clientX - rect.left) * scaleX / canvas.width) * 2 - 1;\n  //   mouseY = -(((event.clientY - rect.top) * scaleY / canvas.height) * 2 - 1);\n  // });\n\n  let lastTime = 0;\n  function animate(time: number) {\n    const deltaTime = (time - lastTime); lastTime = time;\n\n    for (let i = 0; i < instanceCount; i++) {\n      const x = Math.sin(i * 0.21 + deltaTime * 0.001) * 3;\n      const y = Math.sin(i * 0.37 + time * 0.001) * 2;\n      const z = -5.0 + Math.sin(i * 0.13 + time * 0.001) * 3;\n\n      const scale = 0.2 + Math.sin(i + time * 0.001) * 0.05;\n\n      const translation = Mat4.translation(x, y, z);\n      const scaling = Mat4.scaling(scale, scale, scale);\n      const rotationX = Mat4.rotationX(time * 0.0005 * (i % 1 + 1));\n      const rotationY = Mat4.rotationY(time * 0.0003 * (i % 5 + 1));\n\n      const modelMatrix = translation\n        .multiply(rotationY)\n        .multiply(rotationX)\n        .multiply(scaling);\n\n      instanceMatrices[i] = modelMatrix;\n    }\n\n    if (cubeObject instanceof Object3D) {\n      cubeObject.updateInstanceMatrices((renderer as any).getDevice(), instanceMatrices);\n    }\n\n    (renderer as WebGPURenderer).render();\n    requestAnimationFrame(animate);\n  }\n\n  requestAnimationFrame(animate);\n}\n\nasync function create2DScene(canvas: HTMLCanvasElement) {\n  const renderer = await initRenderer(canvas);\n  if (!renderer) return;\n\n  const width = renderer.getCanvas()!.width;\n  const height = renderer.getCanvas()!.height;\n\n  // Note (david) Top (flipped for 2D screen coordinates)\n  renderer.setupOrthographicCamera(0, width, height, 0, -1, 1);\n\n  const { vertices, indices } = Geometry.createQuad();\n  const quadObject = new Object2D(vertices, indices);\n  renderer.addObject(quadObject);\n\n  const instanceCount = 10000;\n  quadObject.setInstanceCount(renderer.getDevice()!, instanceCount);\n\n  interface Particle {\n    position: [number, number];\n    velocity: [number, number];\n    rotation: number;\n    rotationSpeed: number;\n    scale: [number, number];\n    color: [number, number, number, number];\n    life: number;\n    maxLife: number;\n  }\n\n  let mouseX = 0;\n  let mouseY = 0;\n\n  document.addEventListener(\"mousemove\", (event: MouseEvent) => {\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n\n    mouseX = (event.clientX - rect.left) * scaleX;\n    mouseY = (event.clientY - rect.top) * scaleY;\n  });\n\n  const particles: Particle[] = [];\n  for (let i = 0; i < instanceCount; i++) {\n    particles.push({\n      position: [width / 2, height / 2],\n      velocity: [\n        (Math.random() - 0.5) * 500,\n        (Math.random() - 0.5) * 500\n      ],\n      rotation: Math.random() * Math.PI * 2,\n      rotationSpeed: (Math.random() - 0.5) * 2,\n      scale: [10, 20],\n      color: [\n        Math.random(),\n        Math.random(),\n        Math.random(),\n        1.0\n      ],\n      life: 0,\n      maxLife: 1 + Math.random() * 4\n    });\n  }\n\n  // Note (David) 9 floats per instance: position(2), rotation(1), scale(2), color(4)\n  const instanceData = new Float32Array(instanceCount * 9);\n\n  let lastTime = 0;\n  function animate(time: number) {\n    const deltaTime = (time - lastTime) / 1000;\n    lastTime = time;\n\n    for (let i = 0; i < instanceCount; i++) {\n      const particle = particles[i];\n\n      particle.life += deltaTime;\n      if (particle.life >= particle.maxLife) {\n        particle.position = [mouseX, mouseY];\n        particle.velocity = [\n          (Math.random() - 0.5) * 500,\n          (Math.random() - 0.5) * 500\n        ];\n        particle.life = 0;\n        particle.color[3] = 1.0;\n      }\n\n      particle.position[0] += particle.velocity[0] * deltaTime;\n      particle.position[1] += particle.velocity[1] * deltaTime;\n      particle.rotation += particle.rotationSpeed * deltaTime;\n      particle.color[3] = 1.0 - (particle.life / particle.maxLife);\n\n      const offset = i * 9;\n      instanceData[offset + 0] = particle.position[0];\n      instanceData[offset + 1] = particle.position[1];\n      instanceData[offset + 2] = particle.rotation;\n      instanceData[offset + 3] = particle.scale[0];\n      instanceData[offset + 4] = particle.scale[1];\n      instanceData[offset + 5] = particle.color[0];\n      instanceData[offset + 6] = particle.color[1];\n      instanceData[offset + 7] = particle.color[2];\n      instanceData[offset + 8] = particle.color[3];\n    }\n\n    quadObject.updateInstanceData((renderer as WebGPURenderer).getDevice()!, instanceData);\n    (renderer as WebGPURenderer).render();\n\n    requestAnimationFrame(animate);\n  }\n\n  requestAnimationFrame(animate);\n}\n\nexport function startDemo(type: '3d' | '2d') {\n  if (type === '3d') {\n    const canvas = document.getElementById('canvas-3d') as HTMLCanvasElement;\n    create3DScene(canvas);\n  } else {\n    const canvas = document.getElementById('canvas-2d') as HTMLCanvasElement;\n    create2DScene(canvas);\n  }\n}\n","/**\n * Check if WebGPU is supported in the current browser\n * @returns Promise that resolves to true if WebGPU is supported, false otherwise\n */\nexport async function checkWebGPUSupport(): Promise<boolean> {\n  if (!navigator.gpu) {\n    return false;\n  }\n\n  try {\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n      return false;\n    }\n\n    return true;\n  } catch (e) {\n    console.error('Error checking WebGPU support:', e);\n    return false;\n  }\n}","import { startDemo } from \"./app\";\nimport { checkWebGPUSupport } from './utils/utils';\n\nconst statusElement = document.getElementById('status') as HTMLDivElement;\n\nasync function main() {\n  const supported = await checkWebGPUSupport();\n  if (!supported) {\n    statusElement.textContent = 'WebGPU is not supported in your browser.';\n    statusElement.style.backgroundColor = 'rgba(255, 0, 0, 0.5)';\n    return;\n  }\n\n  statusElement.textContent = 'WebGPU supported!';\n\n  startDemo('3d');\n  startDemo('2d');\n}\n\nmain();"],"names":["Mat4","values","i","other","a","b","res","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b10","b11","b12","b13","b20","b21","b22","b23","b30","b31","b32","b33","b04","b05","b06","b07","b08","b09","det","x","y","z","angle","c","s","fov","aspect","near","far","f","left","right","bottom","top","eye","target","up","Vec3","newUp","v","length","WebGPURenderer","canvas","adapter","cameraBindGroupLayout","width","height","object","index","viewMatrix","projectionMatrix","viewProjectionMatrix","viewMatrixArray","projectionMatrixArray","colorView","depthView","commandEncoder","renderPass","view","projection","DEFAULT_3D_SHADER","DEFAULT_2D_SHADER","RenderObject","device","instanceData","Object3D","vertices","indices","shader","instanceDataSize","materialBuffer","bindGroupLayout","pipelineLayout","shaderModule","count","matrices","offset","j","Object2D","Geometry","radius","latitudeBands","longitudeBands","lat","theta","sinTheta","cosTheta","lon","phi","sinPhi","u","first","second","widthSegments","heightSegments","widthHalf","heightHalf","gridX","gridY","segmentWidth","segmentHeight","iy","ix","d","initRenderer","renderer","create3DScene","cubeObject","instanceCount","instanceMatrices","lastTime","animate","time","deltaTime","scale","translation","scaling","rotationX","rotationY","modelMatrix","create2DScene","quadObject","mouseX","mouseY","event","rect","scaleX","scaleY","particles","particle","startDemo","type","checkWebGPUSupport","e","statusElement","main"],"mappings":"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"}